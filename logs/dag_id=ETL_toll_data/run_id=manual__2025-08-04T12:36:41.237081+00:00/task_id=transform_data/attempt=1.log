{"timestamp":"2025-08-04T12:39:52.078439","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-04T12:39:52.079782","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/toll_data_etl_bash.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-04T12:39:52.143772Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-04T12:39:52.144160Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-04T12:39:52.147668Z","level":"info","event":"Current task name:transform_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-04T12:39:52.148005Z","level":"info","event":"Dag name:ETL_toll_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-04T12:39:52.142643","level":"info","event":"Tmp dir root location: /tmp","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-04T12:39:52.143867","level":"info","event":"Running command: ['/usr/bin/bash', '-c', '\\n    echo \"🔄 Reordering fields and transforming vehicle type to uppercase...\"\\n\\n    if awk -F\\',\\' \\'{\\n        $4 = toupper($4);  # Vehicle type -> uppercase\\n        print $1\",\"$2\",\"$3\",\"$4\",\"$5\",\"$6\",\"$7\",\"$8\",\"$9\\n    }\\' OFS=\\',\\' /opt/airflow/data/extracted_data.csv > /opt/airflow/data/staging/transformed_data.csv; then\\n        echo \"✅ Final CSV created with reordered fields and transformed vehicle type.\"\\n    else\\n        echo \"❌ Failed to transform and reorder extracted data.\" >&2\\n        exit 1\\n    fi\\n\\n    echo \"🎉 The whole data processing is successfully completed!\"\\n    ']","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-04T12:39:52.161946","level":"info","event":"Output:","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-04T12:39:52.165018","level":"info","event":"🔄 Reordering fields and transforming vehicle type to uppercase...","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-04T12:39:52.230907","level":"info","event":"✅ Final CSV created with reordered fields and transformed vehicle type.","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-04T12:39:52.231098","level":"info","event":"🎉 The whole data processing is successfully completed!","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-04T12:39:52.231313","level":"info","event":"Command exited with return code 0","logger":"airflow.task.hooks.airflow.providers.standard.hooks.subprocess.SubprocessHook"}
{"timestamp":"2025-08-04T12:39:52.232177","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01987515-84bd-7421-9895-c81ff4329d62'), task_id='transform_data', dag_id='ETL_toll_data', run_id='manual__2025-08-04T12:36:41.237081+00:00', try_number=1, map_index=-1, hostname='bb885a803bb3', context_carrier=None, task=<Task(BashOperator): transform_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 8, 4, 12, 39, 51, 957529, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/ETL_toll_data/runs/manual__2025-08-04T12%3A36%3A41.237081%2B00%3A00/tasks/transform_data?try_number=1')","logger":"task"}
{"timestamp":"2025-08-04T12:39:52.291519Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-04T12:39:52.291915Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-04T12:39:52.292228Z","level":"info","event":"Task operator:<Task(BashOperator): transform_data>","chan":"stdout","logger":"task"}
